'use client'

import React, { createContext, useContext, useEffect, useState } from 'react'
import { User } from '@supabase/auth-helpers-nextjs'
import { authService, SignUpData, SignInData } from '@/lib/auth'

// ÊºîÁ§∫Ê®°ÂºèÊ†áÂøó - Âè™ÊúâÂú®Ê≤°ÊúâÈÖçÁΩÆÁúüÂÆû Supabase URL Êó∂ÊâçÂêØÁî®ÊºîÁ§∫Ê®°Âºè
const DEMO_MODE = !process.env.NEXT_PUBLIC_SUPABASE_URL || 
  process.env.NEXT_PUBLIC_SUPABASE_URL.includes('your-project-id') ||
  process.env.NEXT_PUBLIC_SUPABASE_URL.includes('your_supabase_url_here') ||
  !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ||
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY.includes('your_supabase_anon_key_here')

interface AuthContextType {
  user: User | null
  loading: boolean
  signUp: (data: SignUpData) => Promise<{ data: any; error: any }>
  signIn: (data: SignInData) => Promise<{ data: any; error: any }>
  signOut: () => Promise<{ error: any }>
  resetPassword: (email: string) => Promise<{ error: any }>
  updateProfile: (updates: { full_name?: string; avatar_url?: string }) => Promise<{ error: any }>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (DEMO_MODE) {
      // ÊºîÁ§∫Ê®°ÂºèÔºöËÆæÁΩÆ‰∏Ä‰∏™Ê®°ÊãüÁî®Êà∑
      console.log('ÊºîÁ§∫Ê®°ÂºèÔºö‰ΩøÁî®Ê®°ÊãüÁî®Êà∑')
      setUser({
        id: 'demo-user-id',
        email: 'demo@example.com',
        user_metadata: { full_name: 'ÊºîÁ§∫Áî®Êà∑' },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        aud: 'authenticated',
        role: 'authenticated'
      } as User)
      setLoading(false)
      return
    }

    // Ëé∑ÂèñÂàùÂßã‰ºöËØù
    const getInitialSession = async () => {
      try {
        const { session } = await authService.getSession()
        setUser(session?.user ?? null)
      } catch (error) {
        console.error('Ëé∑Âèñ‰ºöËØùÂ§±Ë¥•:', error)
        
        // Ê£ÄÊü•ÊòØÂê¶ÊòØ token Áõ∏ÂÖ≥ÈîôËØØ
        const errorMessage = error instanceof Error ? error.message : String(error)
        if (errorMessage.includes('Invalid Refresh Token') || 
            errorMessage.includes('Refresh Token Not Found') ||
            errorMessage.includes('refresh_token_not_found')) {
          console.warn('üîë Ê£ÄÊµãÂà∞Êó†ÊïàÁöÑ refresh tokenÔºåÊ∏ÖÁêÜÊú¨Âú∞‰ºöËØù')
          // Ê∏ÖÁêÜÂèØËÉΩÂ≠òÂú®ÁöÑÊó†Êïà token
          try {
            await authService.signOut()
          } catch (signOutError) {
            console.error('Ê∏ÖÁêÜ‰ºöËØùÊó∂Âá∫Èîô:', signOutError)
          }
        }
        
        setUser(null)
      } finally {
        setLoading(false)
      }
    }

    getInitialSession()

    // ÁõëÂê¨ËÆ§ËØÅÁä∂ÊÄÅÂèòÂåñ
    const { data: { subscription } } = authService.onAuthStateChange(
      async (event, session) => {
        console.log('ËÆ§ËØÅÁä∂ÊÄÅÂèòÂåñ:', event, session?.user?.email)
        
        // Â§ÑÁêÜ token Â§±ÊïàÁöÑÊÉÖÂÜµ
        if (event === 'TOKEN_REFRESHED' && !session) {
          console.warn('üîÑ Token Âà∑Êñ∞Â§±Ë¥•ÔºåÊ∏ÖÁêÜÁî®Êà∑Áä∂ÊÄÅ')
          setUser(null)
        } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {
          console.log('üëã Áî®Êà∑Â∑≤ÁôªÂá∫ÊàñÂà†Èô§')
          setUser(null)
        } else if (session?.user) {
          setUser(session.user)
        } else if (!session) {
          setUser(null)
        }
        
        setLoading(false)
      }
    )

    return () => subscription.unsubscribe()
  }, [])

  const signUp = async (data: SignUpData) => {
    console.log('AuthContext: ÂºÄÂßãÊ≥®ÂÜåÊµÅÁ®ã')
    try {
      const result = await authService.signUp(data)
      console.log('AuthContext: Ê≥®ÂÜåÁªìÊûú', result)
      return result
    } catch (error) {
      console.error('AuthContext: Ê≥®ÂÜåÂºÇÂ∏∏', error)
      return { data: { user: null }, error }
    }
  }

  const signIn = async (data: SignInData) => {
    console.log('AuthContext: ÂºÄÂßãÁôªÂΩïÊµÅÁ®ã')
    try {
      const result = await authService.signIn(data)
      console.log('AuthContext: ÁôªÂΩïÁªìÊûú', result)
      return result
    } catch (error) {
      console.error('AuthContext: ÁôªÂΩïÂºÇÂ∏∏', error)
      return { data: { user: null }, error }
    }
  }

  const signOut = async () => {
    console.log('AuthContext: ÂºÄÂßãÁôªÂá∫ÊµÅÁ®ã')
    try {
      const result = await authService.signOut()
      setUser(null)
      return result
    } catch (error) {
      console.error('AuthContext: ÁôªÂá∫ÂºÇÂ∏∏', error)
      return { error }
    }
  }

  const resetPassword = async (email: string) => {
    console.log('AuthContext: ÂºÄÂßãÈáçÁΩÆÂØÜÁ†ÅÊµÅÁ®ã')
    try {
      return await authService.resetPassword(email)
    } catch (error) {
      console.error('AuthContext: ÈáçÁΩÆÂØÜÁ†ÅÂºÇÂ∏∏', error)
      return { error }
    }
  }

  const updateProfile = async (updates: { full_name?: string; avatar_url?: string }) => {
    console.log('AuthContext: ÂºÄÂßãÊõ¥Êñ∞ËµÑÊñôÊµÅÁ®ã')
    try {
      const result = await authService.updateProfile(updates)
      if (result.user) {
        setUser(result.user)
      }
      return result
    } catch (error) {
      console.error('AuthContext: Êõ¥Êñ∞ËµÑÊñôÂºÇÂ∏∏', error)
      return { error }
    }
  }

  const value = {
    user,
    loading,
    signUp,
    signIn,
    signOut,
    resetPassword,
    updateProfile,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}